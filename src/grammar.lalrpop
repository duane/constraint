use std::str::FromStr;
use expr::{Scalar, RawLinearRelation, Relation};
use expr::RawLinearExpression;
use problem::{Problem, ProblemObjective, RawProblemObjective};
use var::Var;

grammar;

pub Scalar: Scalar = <s:r"[0-9]+\.?[0-9]*([eE]-?[0-9]+)?"> => f64::from_str(s).unwrap();

pub Variable: Var = <s:r"[_a-zA-Z][_.[\]a-zA-Z0-9]*"> => Var::external(String::from(s));

Term: RawLinearExpression = {
  <s:Scalar> => RawLinearExpression::from(s),
  <v:Variable> =>  RawLinearExpression::from(v),
  <s:Scalar> "*"? <v:Variable> => RawLinearExpression::term(v, s)
};

PossiblyUnaryTerm: RawLinearExpression = {
    "-" <r:Term> => r.times(-1.0),
    <r:Term> => r
};

pub Expression: RawLinearExpression = {
  <t:PossiblyUnaryTerm> => t,
  <a:Expression> "+" <b:PossiblyUnaryTerm> => a.plus(&b),
  <a:Expression> "-" <b:PossiblyUnaryTerm> => a.minus(&b),
  "(" <e:Expression> ")" => e
};

pub Relation: Relation = {
  "<" => Relation::LT,
  "<=" => Relation::LEQ,
  ">" => Relation::GT,
  ">=" => Relation::GEQ,
  "=" => Relation::EQ,
  "!=" => Relation::NEQ
};

pub LinearRelation: RawLinearRelation = {
  <lhs:Expression> <o:Relation> <rhs:Expression> => RawLinearRelation::new(lhs, o, rhs)
};

pub ProblemObjective: RawProblemObjective = {
  "maximize(" <e:Expression> ")" => ProblemObjective::Maximize(e),
  "minimize(" <e:Expression> ")" => ProblemObjective::Minimize(e)
};

pub LINE_SEP = ";";

pub Problem: Problem = {
  <o: ProblemObjective> LINE_SEP+ <i:LinearRelation> <r:(LINE_SEP+ LinearRelation)*> => {
    let mut exprs: Vec<RawLinearRelation> = r.into_iter().map(|t|{t.1}).collect();
    exprs.push(i);
    Problem::new(o, exprs)
  }
};
